name: Run Tests

on:
  push:
    branches: ["main"]
  pull_request:
  merge_group:

env:
  YARN_ENABLE_HARDENED_MODE: "0"

jobs:
  yarn-duplicates:
    runs-on: ubuntu-latest
    env:
      # This one runs with YARN_ENABLE_HARDENED_MODE=1, all the others run with 0
      YARN_ENABLE_HARDENED_MODE: "1"
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"
      - run: yarn install --immutable --inline-builds

      - run: yarn dedupe --check

  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"
      - run: yarn install --immutable --inline-builds

      - run: yarn prettier --check '**/*.{ts,tsx}'

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"
      - run: yarn install --immutable --inline-builds

      - run: yarn lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"
      - run: yarn install --immutable --inline-builds

      - run: yarn typecheck

  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"
      - run: yarn install --immutable --inline-builds

      - run: yarn test -- --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
 
  test-e2e-desktop-standalone:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      E2E_TEST: "true"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Install dependencies
        run: yarn install --immutable --inline-builds

      - name: Build desktop
        run: yarn build

      - name: Make logs folder
        run: mkdir -p ${{ runner.temp }}/logs

      - name: Run Playwright tests
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- yarn ${{ runner.debug && 'test:e2e:debug' || 'test:e2e' }} --project standalone
        env:
          PLAYWRIGHT_HTML_REPORT: ${{ github.workspace }}/playwright-report
          BADGER_LOGS_PATH: ${{ runner.temp }}/logs

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-desktop
          path: |
            ./playwright-report/
            ./traces/
            ./test-results/
            ${{ runner.temp }}/logs
          retention-days: 30

  test-e2e-desktop-complete:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      E2E_TEST: "true"
      DATABASE_URL: postgres://root:postgres@localhost:5432/badger_test
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: Docker Compose
        uses: hoverkraft-tech/compose-action@v2.0.2

      - name: Install dependencies
        run: yarn install --immutable --inline-builds

      - uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: "release"

      - name: Build server
        run: |
          yarn build
          cp -r public .next/standalone/server/public
          mkdir -p .next/standalone/server/.next
          cp -r .next/static .next/standalone/server/.next/static
        working-directory: ./server

      - name: Build Jobrunner
        run: |
          yarn build
          cp ../utility/prisma/schema.prisma .
        working-directory: ./jobrunner

      - name: Build desktop
        run: yarn build

      - name: Migrate database
        run: yarn prisma:migrateProd

      - name: Make logs folder
        run: mkdir -p ${{ runner.temp }}/logs

      - name: Run Playwright tests
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- yarn ${{ runner.debug && 'test:e2e:debug' || 'test:e2e' }} --project complete
        env:
          PLAYWRIGHT_HTML_REPORT: ${{ github.workspace }}/playwright-report
          BADGER_LOGS_PATH: ${{ runner.temp }}/logs

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-desktop
          path: |
            ./playwright-report/
            ./traces/
            ./test-results/
            ${{ runner.temp }}/logs
          retention-days: 30
